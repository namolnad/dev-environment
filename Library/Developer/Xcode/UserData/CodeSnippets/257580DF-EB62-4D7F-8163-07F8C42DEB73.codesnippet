<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>boiler_presenter</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import CarrotCore
import RxSwift

protocol &lt;#name#&gt;PresenterOutputType: class {
    func dispatch(&lt;#event_name#&gt; event: RequestEvent&lt;&lt;#model_type#&gt;&gt;)
}

protocol &lt;#name#&gt;PresenterType {
    weak var output: &lt;#name#&gt;PresenterOutputType? { get set }

    var interactor: &lt;#name#&gt;InteractorType? { get set }

    func get(parameters: [String: Any]? = nil)
}

final class &lt;#name#&gt;Presenter: &lt;#name#&gt;PresenterType {
    weak var output: &lt;#name#&gt;PresenterOutputType?

    var interactor: &lt;#name#&gt;InteractorType?

    func get(parameters: [String: Any]? = nil) {
        interactor?.get(parameters: parameters)
    }
}

extension &lt;#name#&gt;Presenter: &lt;#name#&gt;InteractorOutputType {
    func dispatch(&lt;#event_name#&gt; event: RequestEvent&lt;&lt;#model#&gt;&gt;) {
        switch event {
        case .loading(let loading):
            output?.dispatch(&lt;#event_name#&gt;: .loading(loading))
        case .success(let &lt;#model#&gt;):
            output?.dispatch(&lt;#event_name#&gt;: .success(&lt;#model#&gt;))
        case .failure(let error):
            output?.dispatch(&lt;#event_name#&gt;: .failure(error))
        }
    }
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>257580DF-EB62-4D7F-8163-07F8C42DEB73</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetTitle</key>
	<string>Presenter</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
