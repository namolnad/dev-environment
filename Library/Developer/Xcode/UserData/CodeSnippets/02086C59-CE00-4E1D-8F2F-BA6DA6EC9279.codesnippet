<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>baseModuleData</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import CarrotCore
import Mapper

typealias &lt;#ModuleName#&gt;Module = BaseModule&lt;&lt;#ModuleName#&gt;ModuleData&gt;

struct &lt;#ModuleName#&gt;ModuleData: ModuleData, Codable {
    enum CodingKeys: String, CodingKey {
    
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        self.&lt;#property#&gt; = container.decode(key: .&lt;#key#&gt;, default: [])
        self.&lt;#property#&gt; = container.optionalDecode(key: .&lt;#key#&gt;)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(&lt;#property#&gt;, forKey: .&lt;#key#&gt;)
    }
}

extension &lt;#ModuleName#&gt;ModuleData: Mappable {
    init(map: Mapper) throws {
        self.&lt;#property#&gt; = try map.from(CodingKeys.&lt;#key#&gt;.stringValue)
        self.&lt;#property#&gt; = map.optionalFrom(CodingKeys.&lt;#key#&gt;.stringValue)
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>02086C59-CE00-4E1D-8F2F-BA6DA6EC9279</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>baseModule</string>
	<key>IDECodeSnippetTitle</key>
	<string>BaseModule</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
