snippet interactor "Interactor type boilerplate" b
import CarrotCore
import RxSwift

protocol ${1:name}InteractorOutputType: class {
    func dispatch(${2:response_name} event: RequestEvent<${3:response_model}>)
}

protocol ${1:name}InteractorType: class {
    weak var output: ${1:name}InteractorOutputType? { get set }

    func get(parameters: [String: Any]?)
}

final class ${1:name}Interactor: ${1:name}InteractorType {
    weak var output: ${1:name}InteractorOutputType?

    private let disposeBag = DisposeBag()

    func get(parameters: [String: Any]? = nil) {
        output?.dispatch(${2:response_name}: .loading(true))

    }
}
endsnippet

snippet presenter "PresenterType boilerplate" b
import CarrotCore
import RxSwift

protocol ${1:name}PresenterOutputType: class {
    func dispatch(${2:event_name} event: RequestEvent<${3:model_type}>)
}

protocol ${1:name}PresenterType {
    weak var output: ${1:name}PresenterOutputType? { get set }

    var interactor: ${1:name}InteractorType? { get set }

    func get(parameters: [String: Any]? = nil)
}

final class ${1:name}Presenter: ${1:name}PresenterType {
    weak var output: ${1:name}PresenterOutputType?

    var interactor: ${1:name}InteractorType?

    func get(parameters: [String: Any]? = nil) {
        interactor?.get(parameters: parameters)
    }
}

extension ${1:name}Presenter: ${1:name}InteractorOutputType {
    func dispatch(${2:event_name} event: RequestEvent<${3:model_type}>) {
        switch event {
        case .loading(let loading):
            output?.dispatch(${2:event_name}: .loading(loading))
        case .success(let ${4:model}):
            output?.dispatch(${2:event_name}: .success(${4:model}))
        case .failure(let error):
            output?.dispatch(${2:event_name}: .failure(error))
        }
    }
}
endsnippet

snippet recordmode "setUp test override for quickly enabling record mode" b
override func setUp() {
    super.setUp()

    recordMode = true
}
endsnippet

snippet test "A basic test case" b
@testable import ${1:TestModule}
import XCTest

final class ${2:TestClass}: ${3:XC}TestCase {
    func test${4:Default}() {
        ${5:test code}
    }
}
endsnippet
